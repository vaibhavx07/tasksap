{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/schematics/src/action/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,yDAaoC;AAEpC,yDAA+E;AAC/E,iEAA6E;AAE7E,mBAAyB,OAAsB;IAC7C,OAAO,UAAC,IAAU,EAAE,OAAyB;QAC3C,OAAO,CAAC,IAAI,GAAG,gCAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7C,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,QAAQ;YAC/B,CAAC,CAAC,kBAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC;YACpC,CAAC,CAAC,oBAAU,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;QAEzC,IAAM,UAAU,GAAG,2BAAS,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC/B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAE/B,IAAM,cAAc,GAAG,kBAAK,CAC1B,gBAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,EACrD;YACE,OAAO,CAAC,SAAS;gBACf,CAAC,CAAC,mBAAM,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAnC,CAAmC,CAAC;gBACvD,CAAC,CAAC,iBAAI,EAAE;YACV,2BAAc,gCACT,6BAAW,KACd,SAAS,EAAE,UAAC,CAAS;oBACnB,OAAA,6BAAW,CAAC,KAAK,CACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EACrB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAC/B;gBAHD,CAGC,KACA,OAAO,EACV;YACF,iBAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SACtB,CACF,CAAC;QAEF,OAAO,kBAAK,CAAC,CAAC,2BAAc,CAAC,kBAAK,CAAC,CAAC,sBAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAChE,IAAI,EACJ,OAAO,CACR,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AApCD,+BAoCC","sourcesContent":["import {\n  Rule,\n  apply,\n  applyTemplates,\n  branchAndMerge,\n  chain,\n  filter,\n  mergeWith,\n  move,\n  noop,\n  url,\n  Tree,\n  SchematicContext,\n} from '@angular-devkit/schematics';\nimport { Schema as ActionOptions } from './schema';\nimport { getProjectPath, stringUtils, parseName } from '../../schematics-core';\nimport { capitalize, camelize } from '../../schematics-core/utility/strings';\n\nexport default function (options: ActionOptions): Rule {\n  return (host: Tree, context: SchematicContext) => {\n    options.path = getProjectPath(host, options);\n\n    options.prefix = options.creators\n      ? camelize(options.prefix || 'load')\n      : capitalize(options.prefix || 'load');\n\n    const parsedPath = parseName(options.path, options.name);\n    options.name = parsedPath.name;\n    options.path = parsedPath.path;\n\n    const templateSource = apply(\n      url(options.creators ? './creator-files' : './files'),\n      [\n        options.skipTests\n          ? filter((path) => !path.endsWith('.spec.ts.template'))\n          : noop(),\n        applyTemplates({\n          ...stringUtils,\n          'if-flat': (s: string) =>\n            stringUtils.group(\n              options.flat ? '' : s,\n              options.group ? 'actions' : ''\n            ),\n          ...options,\n        }),\n        move(parsedPath.path),\n      ]\n    );\n\n    return chain([branchAndMerge(chain([mergeWith(templateSource)]))])(\n      host,\n      context\n    );\n  };\n}\n"]}